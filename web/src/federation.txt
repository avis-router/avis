Federation
======================================================================

Elvin routers can be federated together to form wide-area event
notification networks. A federated network of Elvin routers appears to
provide a single space of events to clients.

Federation Classes
----------------------------------------------------------------------

To federate two routers you first need to decide which events to
exchange. For trusted routers this may be simply be all events,
however you will usually want to be more specific as to what sorts of
events you want to accept and provide.

In Avis, a _federation class_ is used to specify events to import and
export using [subscription expressions][subscription]. For example,
you might define a `Public` federation class that allows [tickertape
and presence][tickertape] events in and out using:

<pre>
<span class="variable-name">Federation.Subscribe</span>[<span class="constant">Public</span>] = \
  Presence-Protocol == 1000 || string (Message)

<span class="variable-name">Federation.Provide</span>[<span class="constant">Public</span>] = \
   Distribution == "world" &amp;&amp; \
   (Presence-Protocol == 1000 || string (Message))
</pre>

This example class allows any tickertape or presence event into the
router, but only events with a `Distribution` field with the value
"world" to be federated outwards.

Connecting Routers
----------------------------------------------------------------------

To connect two routers you need to decide which one initiates the
connection and which listens for connections. The router that
initiates the connection needs a line like:

<pre>
<span class="variable-name">Federation.Connect</span>[<span class="constant">Public</span>] = ewaf://public.elvin.org
</pre>

This specifies that the router should connect to `public.elvin.org`
using the `Public` federation class.

Incoming Connections
----------------------------------------------------------------------

To set which address and port to listen to for incoming federation
connections:

<pre>
<span class="variable-name">Federation.Listen</span> = ewaf://0.0.0.0:2916
</pre>

The host that listens for incoming connections also needs a mapping
from a remote host's name to a federation class to use for the
connection. For example, to specify that connections from the host
`public.elvin.org` should use the `Public` federation class, and that
a host you manage called `hex.somewhere.org` uses an `Internal` class:

<pre>
<span class="variable-name">Federation.Apply-Class</span>[<span class="constant">Public</span>] = @public.elvin.org

<span class="variable-name">Federation.Apply-Class</span>[<span class="constant">Internal</span>] = @hex.somewhere.org
</pre>

You can also define a default mapping for hosts that do not match any
of the `Apply-Class` mappings:

<pre>
<span class="variable-name">Federation.Default-Class</span> = Public
</pre>

As a security measure, if there is no mapping for a connecting host
either via `Apply-Class` or `Default-Class`, then the host will be
refused federation access.

See the comments in `etc/avisd.conf` file for more information on
setting up federation.

[tickertape]: http://tickertape.org/documents/what_is_tickertape.html "About tickertape messaging"

[subscription]: subscription_language.html

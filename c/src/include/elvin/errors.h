#ifndef ERRORS_H_
#define ERRORS_H_

#include <stdbool.h>

typedef struct
{
  int code;
  const char *message;
} Elvin_Error;


#define ELVIN_HOST_ERROR_BASE 10000
#define ELVIN_ERROR_BASE 20000

#define ELVIN_ERROR_CONNECTION_CLOSED (ELVIN_ERROR_BASE + 0)
#define ELVIN_ERROR_INTERNAL (ELVIN_ERROR_BASE + 1)
#define ELVIN_ERROR_PROTOCOL (ELVIN_ERROR_BASE + 2)

#define ELVIN_ERROR_NONE ELVIN_ERROR_BASE

#define elvin_error_create() {.code = ELVIN_ERROR_NONE, .message = NULL}
#define elvin_error_destroy(error)

#define error_return(expr) {if (!(expr)) return false;}

/*
 * Convert the h_errno error code generated by gethostbyname () etc to
 * an error code. 
 */
#define HOST_TO_ELVIN_ERROR(code) (ELVIN_HOST_ERROR_BASE + code)

void elvin_perror (const char *tag, Elvin_Error *error);
bool elvin_error_from_errno (Elvin_Error *error);
bool elvin_error_set (Elvin_Error *error, int code, const char *message);
bool elvin_error_assert (Elvin_Error *error, bool condition, 
                         int code, const char *message);

#define elvin_error_ok(error) ((error)->code == ELVIN_ERROR_NONE)
#define elvin_error_occurred(error) (!elvin_error_ok (error))
#define elvin_error_reset(error) ((error)->code = ELVIN_ERROR_NONE)

#endif /*ERRORS_H_*/

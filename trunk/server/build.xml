<?xml version="1.0"?>
<!--
  ====================================================================== 
  Avis event notification server
  ======================================================================
-->
<project name="avis.server" default="jar-server">
  
  <description>Avis event router server</description>
  
  <property file="avis-server.properties" />

  <!-- The formal version number in major.minor form -->
  <property name="version"
            value="${avis.version.major}.${avis.version.minor}" />

  <property name="release" value="${avis.release}" />

  <!-- The release name: typically the version number followed by a
       release tag e.g. 1.0.2dev or 1.1.dev. -->
  <property name="release-name" value="${version}.${release}" />

  <property name="common_root" value="${basedir}/../common" />
  <property name="common" value="${common_root}/java" />

  <!-- JavaCC 4.0 or later: only needed if you need to change parser -->
  <property name="javacc" value="../../../javacc-4.0" />

  <!-- InnoSetup installation (5.1.9 or later): only needed if building the
       Windows self-installer. -->
  <property name="innosetup" value="C:\Program Files\Inno Setup 5\iscc.exe" />

  <!-- Mac OS X packagemaker app (part of Apple XCode): only needed if
       you need to build the Mac OS X .pkg distro. -->
  <property name="packagemaker"
            value="/Developer/Applications/Utilities/PackageMaker.app/Contents/MacOS/PackageMaker" />
  
  <path id="classpath">
    <fileset dir="${common}/lib">
      <include name="*.jar" />
    </fileset>    
    
    <fileset dir="lib">
      <include name="fastutil-subset.jar" />
    </fileset>
          
    <pathelement path="classes/main" />
    <pathelement path="classes/test" />
    <pathelement path="${common}/classes/main" />
    <pathelement path="${common}/classes/test" />
  </path>
  
  <target name="properties" unless="avisd-jar-uptodate">
    <mkdir dir="classes/main" />
  
    <tstamp>
      <format property="build-date"
              pattern="dd-MMM-yyyy HH:mm:ss ZZ" locale="en" />
    </tstamp>
        
    <filter token="build-date" value="${build-date}" />
    
    <copy file="avis-server.properties" tofile="classes/main/avis.properties"
          overwrite="yes" filtering="yes" />
  </target>

  <target name="compile" description="Compile source and tests">
    <ant antfile="${common}/build.xml" target="compile" inheritall="false"/>
    <ant antfile="${common}/build-common.xml" target="compile"
         inheritrefs="true" inheritall="true"/>
  </target>

  <target name="tests" depends="compile" description="Run unit tests">
    <ant antfile="${common}/build-common.xml" target="tests" inheritrefs="true" />
  </target>

  <target name="clean" description="Clean built artifacts">
    <ant antfile="${common}/build-common.xml" target="clean" inheritall="true" />
    
    <delete file="lib/avisd.jar" includeemptydirs="true" />
  </target>

  <target name="clean-javacc" description="Clean JavaCC-generated files">
    <delete>
      <fileset dir="src/main/org/avis/subscription/parser">
        <include name="SubscriptionParser.java" />
        <include name="SubscriptionParserConstants.java" />
        <include name="SubscriptionParserTokenManager.java" />
        <include name="TokenMgrError.java" />
        <include name="Token.java" />
        <include name="SimpleCharStream.java" />
        <include name="ParseExceptionjava" />
      </fileset>
    </delete>
  </target>
	
  <target name="javacc-subscription-parser"
          description="Generate the subscription parser with JavaCC">
    <javacc javacchome="${javacc}"
            target="src/main/org/avis/subscription/parser/SubscriptionParser.jj" />
  </target>

  <target name="avisd-jar-uptodate">
    <dependset>
      <srcfileset dir="${common}/classes/main" includes="**/*.class" />
      <srcfileset dir="classes/main" includes="**/*.class" />
      
      <targetfileset dir="build">
        <include name="avisd.jar" />
      </targetfileset>
    </dependset>
      
    <condition property="avisd-jar-uptodate">
      <and>
        <available file="build/avisd.jar" />
      </and>
    </condition>
  </target>
    
  <target name="jar-server" depends="compile,avisd-jar-uptodate,properties"
          description="Build avisd.jar" unless="avisd-jar-uptodate">
    
    <taskdef name="jarx" classname="dsto.dfc.tools.JarXTask"
             classpath="${common}/lib/jarx.jar" />

    <mkdir dir="build" />
      
    <jarx archive="build/avisd.jar"
          mainClass="org.avis.router.Main"
          classpathref="classpath">
      
      <include name="avis.properties" />
    </jarx>
    
    <mkdir dir="lib" />
    <copy file="build/avisd.jar" todir="lib" />
  </target>

  <target name="jar-fastutil-subset"
          description="Build minimal fastutil subset">
    
    <taskdef name="jarx" classname="dsto.dfc.tools.JarXTask"
             classpath="${common}/lib/jarx.jar" />

    <mkdir dir="lib" />
    
    <path id="fastutil-full">
      <fileset dir="lib" includes="fastutil-5*.jar" />
    </path>
      
    <jarx archive="lib/fastutil-subset.jar"
          classpathref="fastutil-full">
      <include name="it/unimi/dsi/fastutil/longs/Long2ObjectOpenHashMap.class" />
      <include name="it/unimi/dsi/fastutil/longs/LongArrayList.class" />
    </jarx>    
  </target>
  
  <!-- Build the dump-host-addresses.jar utility -->
  <target name="jar-dumphostaddresses">
      
    <taskdef name="jarx" classname="dsto.dfc.tools.JarXTask"
             classpath="${common}/lib/jarx.jar" />

    <mkdir dir="bin" />
      
    <jarx archive="bin/dump-host-addresses.jar"
          classpathref="classpath" 
          mainclass="org.avis.tools.DumpHostAddresses">
    </jarx>    
  </target>

  <target name="dist-source" depends="jar-server"
          description="Build the source distro">
    
    <property name="ziproot" value="avis-${release-name}" />
    <property name="src_zip" value="build/avis-src-${release-name}.zip" />
    
    <tempfile property="src_tmp" prefix="src_tmp" destdir="build" />
 
    <mkdir dir="${src_tmp}/common/src/main" />
    <mkdir dir="${src_tmp}/common/src/test" />
    <mkdir dir="${src_tmp}/server/src/main" />
    <mkdir dir="${src_tmp}/server/src/test" />
      
    <!-- create copy of source with license headers -->
    
    <property name="header" value="src/avis_java_header.txt" />

    <copy todir="${src_tmp}/server">
      <fileset dir=".">
        <include name="src/main/**/*.java"/>
        <include name="src/main/**/*.jj"/>
        <include name="src/test/**/*.java"/>
      </fileset>
      
      <filterchain>
        <concatfilter prepend="${header}" />
      </filterchain>
    </copy>

    <copy todir="${src_tmp}/common/java">
      <fileset dir="${common}">
        <include name="src/main/**/*.java"/>
        <include name="src/test/**/*.java"/>
      </fileset>
      
      <filterchain>
        <concatfilter prepend="${header}" />
      </filterchain>
    </copy>

    <zip destfile="${src_zip}">
      
      <!-- source -->
      <zipfileset dir="${src_tmp}" prefix="${ziproot}">
        <include name="**/*" />
      </zipfileset>
      
      <!-- others -->
      <zipfileset dir="." prefix="${ziproot}/server">
        <include name=".project" />
        <include name=".classpath" />
        <include name=".settings/*" />
        <include name="build.xml" />
        <include name="lib/*.jar" />
        <include name="etc/avisd.config" />
        <include name="doc/history.txt" />
        <include name="doc/README.txt" />
        <include name="doc/LICENSE.txt" />
        <include name="src/avis_java_header.txt" />
        <include name="packaging/**" />
        <include name="avis-server.properties" />
      </zipfileset>
      
      <zipfileset dir="." prefix="${ziproot}/server" filemode="755">
        <include name="bin/avisd" />
      </zipfileset>
      
      <zipfileset dir="${common}" prefix="${ziproot}/common/java">
        <include name=".project" />
        <include name=".classpath" />
        <include name=".settings/*" />
        <include name="build.xml" />
        <include name="build-common.xml" />
        <include name="lib/*.jar" />
      </zipfileset>

    </zip>
    
    <!-- blow away temporary files -->
    <delete dir="${src_tmp}" />
  </target>

  <target name="dist-osx" depends="jar-server"
          description="Build the Mac OS X binary distro (OS X command line only)">

    <property name="temp" value="${basedir}/build/tmp/osx_package" />
    <property name="root" value="${temp}/root" />
    <property name="resources" value="${temp}/resources" />
    <property name="startup" value="${root}/Library/StartupItems/Avis" />
    <property name="package" value="Avis-${release-name}.pkg" />

    <filter token="release" value="${release-name}" />
    <filter token="major_version" value="${avis.version.major}" />
    <filter token="minor_version" value="${avis.version.minor}" />
    
    <!-- clean temp area -->
    <antcall target="fn:rm-as-root">
      <param name="root" value="${temp}" />
    </antcall>

    <!-- copy startup items -->
    <copy file="packaging/osx/avisd_launcher"
          tofile="${startup}/Avis" preservelastmodified="true" />
    <copy file="packaging/osx/StartupParameters.plist"
          todir="${startup}" preservelastmodified="true" />
    
    <!-- copy package items -->
    <copy file="packaging/osx/welcome.txt"
          tofile="${resources}/Welcome.txt" preservelastmodified="true" />
    <copy file="packaging/osx/license.rtf"
          tofile="${resources}/License.rtf" preservelastmodified="true" />
    <copy file="packaging/osx/Info.plist.in"
          tofile="${temp}/Info.plist" preservelastmodified="true"
          filtering="yes" />
   
    <!-- add standard Unix distro -->
    <antcall target="fn:build-unix-dist-layout">
      <param name="root" value="${root}/usr/local" />
    </antcall>
   
    <!-- fix perms, set ownership -->
    <chmod perm="0755">
      <dirset dir="${root}" />
    </chmod>

    <chmod perm="0644">
      <fileset dir="${root}" />
    </chmod>

    <chmod perm="0755">
      <fileset dir="${root}/usr/local/sbin" />
    </chmod>
    
    <chmod perm="0755" file="${startup}/Avis" />
    <chmod perm="0644" file="${startup}/StartupParameters.plist" />
    <chmod perm="1775" dir="${root}/Library" />
 
    <antcall target="fn:set-unix-admin-ownership">
      <param name="root" value="${root}" />
    </antcall>

    <!-- /Library should be root:admin -->
    <exec executable="sudo">
      <arg line="-p 'Please enter sudo password for chown: '" />
      <arg line="chown root:admin" />
      <arg value="${root}/Library" />
    </exec>

    <mkdir dir="build" />

    <exec executable="${packagemaker}">
      <arg value="-build" />
      <arg value="-p" />
      <arg value="${basedir}/build/${package}" />
      <arg value="-f" />
      <arg value="${root}" />
      <arg value="-r" />
      <arg value="${resources}" />
      <arg value="-i" />
      <arg value="${temp}/Info.plist" />
      <arg value="-d" />
      <arg value="${basedir}/packaging/osx/Description.plist" />
      <arg value="-v" />
    </exec>

    <!-- OS X package files use symlinks, use tar to preserve -->
    <exec executable="tar">
      <arg value="jcf" />
      <arg value="build/Avis-${release-name}.tbz" />
      <arg value="-C" />
      <arg value="build" />
      <arg value="${package}" />
    </exec>

    <!-- clean temp area -->
    <antcall target="fn:rm-as-root">
      <param name="root" value="${temp}" />
    </antcall>

  </target>
  
  <target name="dist-fedora" depends="jar-server"
          description="Build the Red Hat Fedora Core RPM distro">

    <property name="root" value="${basedir}/build/tmp/rpm_root" />
    <delete dir="${root}" />
    
    <mkdir dir="${root}/SOURCES" />
    <mkdir dir="${root}/BUILD" />
    <mkdir dir="${root}/RPMS" />
    <mkdir dir="${root}/SRPMS" />
    <mkdir dir="${root}/SPECS" />

    <!-- NOTE: src dist must expand to avis-$version directory for RPM -->
    <antcall target="dist-source">
      <param name="ziproot" value="avis-${version}" />
      <param name="src_zip" value="${root}/SOURCES/avis-src-${version}.zip" />
    </antcall>
 
    <exec executable="rpmbuild">
      <arg value="-bb" />
      <arg value="--define" />
      <arg value="_topdir ${root}" />
      <arg value="--define" />
      <arg value="_avis_version ${version}" />
      <arg value="--define" />
      <arg value="_avis_release ${release}" />
      <arg value="${basedir}/packaging/fedora/avis.spec" />
    </exec>

    <copy file="${root}/RPMS/noarch/avis-${version}-${release}.noarch.rpm"
          tofile="build/avis-${release-name}.rpm" />

    <delete dir="${root}" />

  </target>

  <!-- Create a tarball distro. Not part of standard set. -->
  <target name="dist-fedora-tarball" depends="jar-server"
          description="Build the Red Hat Fedora Core binary distro">
    <property name="temp" value="${basedir}/build/tmp/fedora" />
    <property name="root" value="${temp}/root" />

    <!-- clean temp area -->
    <delete dir="${temp}" />
    
    <!-- create standard Unix distro -->
    <antcall target="fn:build-unix-dist-layout">
      <param name="root" value="${root}" />
    </antcall>
   
    <!-- add installer files -->
    <copy file="packaging/fedora/init_script.in" todir="${temp}" />
    <copy file="packaging/fedora/README.txt" todir="${temp}" />
    <copy file="packaging/fedora/install.sh" todir="${temp}" />

    <!-- tar it up -->
    <tar destfile="build/avis-fedora-${release-name}.tar.bz2"
         compression="bzip2">
      <tarfileset prefix="avis-${release-name}" dir="${temp}"
                  mode="0755">
        <include name="install.sh" />
      </tarfileset>
      <tarfileset prefix="avis-${release-name}" dir="${temp}">
        <exclude name="install.sh" />
      </tarfileset>
    </tar>

    <!-- clean temp area -->
    <delete dir="${temp}" />    
  </target>
  
  <target name="dist-windows" depends="jar-server"
          description="Build the Windows self-installer distro">
    <mkdir dir="build" />
    
    <filter token="release" value="${release-name}" />
    <filter token="version" value="${version}" />
    
    <copy file="packaging/windows/installer/avis.iss.in"
          tofile="packaging/windows/installer/avis.iss" overwrite="true"
          filtering="true" />
        
    <exec executable="${innosetup}">
      <arg value="/O${basedir}\build" />
      <arg value="/Favis-${release-name}" />
      <arg value="/Q" />
      <arg value="${basedir}\packaging\windows\installer\avis.iss" />
    </exec>

    <!-- <delete file="packaging/windows/installer/avis.iss" /> -->
  </target>

  <!-- build standard Unix distro layout in ${root} -->
  <target name="fn:build-unix-dist-layout">

    <copy file="bin/avisd"
          tofile="${root}/sbin/avisd"
          preservelastmodified="true" />
    <copy file="lib/avisd.jar"
          tofile="${root}/lib/avisd.jar"
          preservelastmodified="true" />
    <copy file="etc/avisd.config"
          tofile="${root}/etc/avis/avisd.config"
          preservelastmodified="true" />
  </target>

  <!-- run "sudo rm -rf ${root}" -->
  <target name="fn:rm-as-root">
     <exec executable="sudo">
      <arg line="-p 'Please enter sudo password for rm -rf ${root}: '" />
      <arg line="rm -rf" />
      <arg value="${root}" />
    </exec>
  </target>
  
  <!-- run "sudo chown -R root:wheel ${root}" -->
  <target name="fn:set-unix-admin-ownership">
    <exec executable="sudo">
      <arg line="-p 'Please enter sudo password for chown -R root:wheel ${root}: '" />
      <arg line="chown -R root:wheel" />
      <arg value="${root}" />
    </exec>
  </target>
  
  <target name="changelog"
          description="Generate a change log (needs previous rev #)">
    <!-- Use command below to get previous release rev #
         svn log -stop-on-copy https://avis.svn.sourceforge.net/svnroot/avis/tags/release_0.7 -->
    <input addproperty="release_rev" message="Enter rev # of last release" />
    <property name="component" value="server" />
    
    <ant antfile="${common}/build-common.xml" target="changelog" 
         inheritrefs="true" />
  </target>

</project>

Avis allows building systems using a publish/subscribe message bus
architecture, an approach which allows you to shift up a level from
thinking of communication in terms of protocols and point to point
networking, and instead think in terms of a connectionless, flat
communication space.

*Adaptable communications*. A message bus supports many communications
arrangements: one to one, one to many, many to many. Clients simply
emit and receive messages on a global bus -- there is no direct
connection between clients, they simply receive messages they've
nominated an interest in if another client somewhere on the bus emits
them.

A message bus can be used to implement traditional client-server
remote procedure calls (RPC's) if needed, but can also support other
kinds of communication requirements, such as textual message broadcast
(e.g. instant messaging, SNMP, stock tickers, RSS news) and discovery
(e.g. software service discovery, Bonjour (aka Zeroconf), UPnP).

*Extending and monitoring*. Because the bus can be joined from
anywhere on the network and uses a uniform message format, any client
can monitor, consume, modify, augment, forward, proxy and generate
messages, making on-the-fly extendability and monitoring far more
straightforward than with opaque RPC and multicast-style systems

*High level protocols, statelessnes, security*. A standard messaging
format means protocols become simpler: you design the content rather
than worry about on-the-wire encoding, network protocols, etc. The bus
architecture also encourages a more stateless connection between
clients and obsoletes the issues of deciding who initiates a
connection, how to handle disconnection and reconnection, and how to
find the service to connect to. And security becomes a matter of
deciding who can and cannot receive which messages and how they're
federated outside.

Where to use Avis?
----------------------------------------------------------------------

So, hopefully the above will have convinced you that a message bus
architecture can be a good choice for many communication-based
systems. Avis is one of a number of message bus "middleware"
providers, which include enterprise standards such as the Java
Messaging System (JMS) and wide-area messaging systems such as
XMPP. So where does Avis fit?
 
Avis has two key features that make it different:

 * It's considerably less complex and lighter-weight than other
   messaging systems, but can scale to large systems.

 * The router is designed for high performance, allowing it to be used
   for applications that send lots of messages and need them delivered
   fast.

It's also an open standard and Free Software, which can't hurt. No
licensing issues, unlimited deployment.

Many middleware systems are claimed to be simple, possibly because
middleware is traditionally thought to be hard. We think the claim is
truly justified in this case, the next two sections will explain.


Low overhead
----------------------------------------------------------------------

Avis messaging is easy to add to a client application: adding the
client library and a few lines of code are needed to subscribe or emit
a message -- no factories, registries, queues or network configuration
needed. The Avis router is easy to install and requires no
configuration or other dependencies. This means deciding to use Avis
is a low cost decision, and the overhead of getting started should not
dominate a small project as would choosing something like JMS.

Avis's simplicity goes a long way towards making it easy to get
started, and its flexibility allows it to scale upwards to more
complex jobs. Once you've set up an Avis server somewhere on the
network for one project, you'll find it even easier to use it for
other projects and, by federating it with other routers, scaled up to
bigger networks.


Router speed
----------------------------------------------------------------------

The Avis message router only delivers messages to clients that are
interested in them and, thanks to Avis' subscription language, clients
can usually be specific enough in what they require that they don't
have to receive messages they're not interested in.

Because the router is stateless, does not support guaranteed delivery,
transactions or durable subscriptions (* explain), and optimises
scanning for matching subscriptions, it handle very large message
volumes. This allows it to be used for semi real-time applications: a
real application of this uses Avis for sending remote mouse control
events to a display server computer, where speed of delivery is
required for the movement to appear smooth.

Avis *is* reliable in the sense that is stable and well tested, but
does not provide an absolute guarantee of delivery, just its
best-effort attempt. If this sounds scary, note that many systems can
happily and safely operate without absolutely guaranteed delivery,
especially given that there is a signficant cost associated with
providing such guarantees.

Costs of guaranteed delivery include slower delivery speed and much
more complex supporting infrastructure: a guaranteed delivery system
needs a persistent message store, tracking for which clients have
received which messages, acknowledgment of message receipt, etc. Such
systems also store a lot of state on the server, which makes server
failover, load-balancing and federation much harder.


When not to use it
----------------------------------------------------------------------

If you need absolute guaranteed message delivery or durability, you'll
probably find something like JMS a more appropriate choice, especially
if you're already using a Java Enterprise or .NET system where such a
choice will allow you to integrate better with other components.


Use
----------------------------------------------------------------------

A testament to how an Avis-style message bus works in real use is the
successful adoption of Avis' commercial big brother, Elvin. Elvin has
become a core component of a number of projects at DSTC, DSTO, and
several universities. Avis and Elvin have been used:

 * To implement a wide-area instant messaging and presence network
   across several organisations,

 * To provide communication and service control for smart meeting
   spaces

 * For RSS news dissemenination

 * To route Stock trade notifications

It has also been used on the side in a number of rojects where it
simply provides a convenient way to instrument or otherwise send a
message from a program that is otherwise not communication oriented at
all (e.g. instrumenting a web application).

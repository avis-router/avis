Roadmap
----------------------------------------------------------------------

* router options
* packaging
* demos: perhaps a little ec/ep using simple client
* resource protection: throttle clients based on total resources
* web site PR: why use Avis? examples


TODO

* case-independent options
* full test with Sticker
* DONE: need separate VM's for MaliciousClient test
* partly done: router-wide options that allow client to grow connection
  footprint such like as keys, subscriptions. client can still easily kill
  server using long subs atm. keys attack window reduced but still may be
  possible using sub/ntfn keys plus long keys. need to check max size of key
  data.
* need general options for thread pool size, max connections, etc. some could
  apply as max/min for connection options.
* ewafd-equivalent. built in?
* do we need SSL/TLS in 1.0?
* how do we handle other langs in SVN? do we need to? e.g. should
  Python binding be a separate project?
* add Unix and windows service wrappers and installers
* add message logging via MINA filter, remove current crusty approach
* what happens when sending ntfn to client that's too big?
* sub expr error reporting as in sec 6.3 and 7.4.2 (NACK codes)
* notification dropping incl DropWarn
* check client version numbers
* test SecRqst: test_sync_modify_keys fails (should NACK empty keys)
* write a multi-threaded test thrasher to test consistency
* write a multi-threaded test thrasher to try to crash server
* write multithreaded "fuzz" test: fire random messages
* DONE: add basic settings to become net ready: limit connection counts,
  subs, bandwidth etc to avoid DOS attacks possible to OOM the server by
  flooding it with fairly large packets.
* DONE: basic enforcment of connection options
* DONE: test performance after MINA 1.0 port. seems to be slower on
  test_threaded_clients (old 6s, new 12s)
* DONE: consistency: use multi-reader setup for changes to ensure
  e.g. a notification not delivered for an old sub already ack'ed.
* DONE: port to MINA 1.0.0. total API change, no porting guide?!
  IoSession seems to replace ProtocolSession. see
  http://svn.apache.org/viewvc/directory/trunks/mina/example/src/main/java/org/apache/mina/example/sumup/

Notes
----
* JUTestServerAttack: Client can exhaust default server heap with
  2K max-sub-count x 3K max-sub-length

Issues for David

* What is new router.coalesce-delay?
* DONE: Can I put je4 in distro? don't need it
* DONE:elvind does not do byte_size_max
* DONE:what is QosRqst? mentioned in 7.5 for changing options

Changelog
----------------------------------------------------------------------

to find revision of tag:

svn log --stop-on-copy https://svn.sourceforge.net/svnroot/avis/tags/release_0.4

to create change log since tag

svn2cl -r XXXX:HEAD https://svn.sourceforge.net/svnroot/avis/trunk


Router options

router.vendor-identification=Mantara elvind 4.4.0
router.recv-queue.max-length=4194304
router.packet.max-length=2097152
router.coalesce-delay=1
router.recv-queue.low-water=4194304
router.attribute.max-count=1024
router.may-subscribe=1
router.recv-queue.high-water=4194304
router.subscription.max-count=2048
router.may-quench=1
router.send-queue.low-water=4194304
router.send-queue.drop-policy=newest
router.supported-keyschemes=SHA1-Producer SHA1-Consumer SHA1-Dual
router.send-queue.high-water=4194304
router.recv-queue.drop-policy=none
router.send-queue.max-length=4194304
router.may-notify=1

Name                        |  Type    |  Min   Default      Max
----------------------------+----------+-------------------------
attribute_max               |  int32   |    64     256     2**31
attribute_name_len_max      |  int32   |    64    2048     2**31
byte_size_max               |  int32   |    1K      1M     2**31
lang                        |  string  |   (router defined)
notif_buffer_drop_policy    |  string  | { "oldest", "newest",
                                           "largest", "fail" }
notif_buffer_min            |  int32   |    1       1K     2**31
opaque_len_max              |  int32   |    1K      1M     2**31
string_len_max              |  int32   |    1K      1M     2**31
sub_len_max                 |  int32   |    1K      2K     2**31
sub_max                     |  int32   |    1K      8K     2**31

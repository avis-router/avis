Avis Example
======================================================================

In this example we imagine a scenario where we have a large number of
servers in several company departments that we wish to monitor. We
install a small Elvin client on each host we want to monitor that runs
the code below every minute:<sup>[1][]</sup>

The diagram below is an overview of the example scenario. We'll expand
on what this means in the following sections.

<img src="images/example overview.png" alt="Example overview diagram" border="0" />

Monitor
----------------------------------------------------------------------

The code below runs on each host we wish to monitor. It puts a message
on the Elvin bus tagged with the message type and
version.<sup>[2][]</sup> The messages describe the host's name,
department and percentage of free disk space.

<pre class="java">
  <span class="type">Router</span> <span class="variable-name">router</span> = <span class="keyword">new</span> <span class="type">Router</span> (<span class="string">"elvin_router"</span>);
  <span class="type">Notification</span> <span class="variable-name">ntfn</span> = <span class="keyword">new</span> <span class="type">Notification</span> ();
  
  ntfn.put (<span class="string">"Status-Message"</span>, 1000);
  ntfn.put (<span class="string">"Host-Name"</span>, hostName ());
  ntfn.put (<span class="string">"Department"</span>,  lookupDepartment ());
  ntfn.put (<span class="string">"Percent-Disk-Free"</span>, diskFreePercentage ());
  
  router.send (ntfn);
  
  router.close ();
</pre>

Logger
----------------------------------------------------------------------

Once we have hosts emitting status messages, we might add a logging
client somewhere in the control centre that stores them in a central
rotating log file. The code below does this by listening for any
status message.

<pre class="java">
  <span class="type">Router</span> <span class="variable-name">router</span> = <span class="keyword">new</span> <span class="type">Router</span> (<span class="string">"elvin_router"</span>);

  <span class="comment-delimiter">// </span><span class="comment">Listen for any version 1.x status message 
</span>  <span class="type">Subscription</span> <span class="variable-name">statusSub</span> =
    <span class="keyword">new</span> <span class="type">Subscription</span> (<span class="string">"Status-Message &lt; 2000"</span>);

  statusSub.addListener (<span class="keyword">new</span> <span class="type">SubscriptionListener</span> ()
  {
    <span class="keyword">public</span> <span class="type">void</span> <span class="function-name">messageReceived</span> (<span class="type">Notification</span> <span class="variable-name">ntfn</span>)
    {
      addLog (ntfn.getString (<span class="string">"Host-Name"</span>),
              ntfn.getInt (<span class="string">"Percent-Disk-Free"</span>));
    }
  });

  router.addSubscription (statusSub);

  ...
</pre>

Alerter
----------------------------------------------------------------------

Perhaps later on we decide we need to be alerted if any of the servers
in in the "IT" department get too low on disk space.

<pre class="java">
  <span class="type">Router</span> <span class="variable-name">router</span> = <span class="keyword">new</span> <span class="type">Router</span> (<span class="string">"elvin_router"</span>);

  <span class="comment-delimiter">// </span><span class="comment">Listen status messages in the IT
</span>  <span class="comment-delimiter">// </span><span class="comment">department where disk space is 10% or less
</span>  <span class="type">Subscription</span> <span class="variable-name">alertSub</span> =
    <span class="keyword">new</span> <span class="type">Subscription</span>
      (<span class="string">"Status-Message &lt; 2000 &amp;&amp; "</span> +
       <span class="string">"Department == 'IT' &amp;&amp; "</span> +
       <span class="string">"Percent-Disk-Free &lt;= 10"</span>);

  alertSub.addListener (<span class="keyword">new</span> <span class="type">SubscriptionListener</span> ()
  {
    <span class="keyword">public</span> <span class="type">void</span> <span class="function-name">messageReceived</span> (<span class="type">Notification</span> <span class="variable-name">ntfn</span>)
    {
      alert (<span class="string">"Host %s has low disk space (%i percent)"</span>,
             ntfn.get (<span class="string">"Host-Name"</span>),
             ntfn.get (<span class="string">"Percent-Disk-Free"</span>));
    }
  });

  router.addSubscription (alertSub);
</pre>

The `alert ()` routine called by the subscription handler above might
do something like flash the message on a big display, send an email or
SMS. In fact `alert ()` might be better off emittng another kind of
"alert" Elvin notification that is handled by several listening
services that could do any of the above.

One useful example of a service that reacts to alerts would be one
that emits a text message in the [tickertape instant messaging
format][about_tickertape]. This format can be displayed by a number of
[ticker clients][ticker_clients], either on a big display or on an
administrator's desktop.

More Information
----------------------------------------------------------------------

While Elvin has been used in many projects, most of these have been
internal and aren't publically available. One openly-available project
written in Java that uses Elvin is the [Sticker tickertape messaging
client][sticker]. Sticker is both a useful testing client for Avis and
a real world example of using Elvin messaging (Sticker uses Elvin both
for instant messaging and virtual presence).

If you're interested in a real Elvin client, the source code for
Sticker is available at [the tickertape.org downloads
page][tickertape_downloads].

<div class="footnotes">
<hr />

Footnotes

<ol>

<li id="fn1-examples">
<p>NOTE: these examples are written using a (currently) fictitious
   Java client library for Elvin, although the API in this example is
   very similar to the commercial <code>je4</code> Java API shipped by
   Mantara. An open source library is scheduled for availability by
   end of April, 2007. See the <a href="roadmap.html">roadmap</a> for
   more information.</p>
</li>

<li id="fn2-examples">
<p> A tag value of <code>1000 == version 1.0</code>, <code>1001 ==
    1.1</code>, <code>2000 == 2.0</code> etc. This kind of versioning
    can be very useful for long-lived formats allowing you to have
    several versions in use on the bus without interfering with each
    other.</p>
</li>

</ol>
</div>

[1]: #fn1-examples
[2]: #fn2-examples
[about_tickertape]: http://tickertape.org/documents/what_is_tickertape.html
[ticker_clients]: http://tickertape.org/documents/get_tickertape.html
[tickertape_downloads]: http://tickertape.org/download
[sticker]: http://tickertape.org/projects/sticker

#ifndef ERRORS_H_
#define ERRORS_H_

#include <avis/stdtypes.h>

/**
 * Error reporting information for the Avis client library:
 * functions in the library uses this as a sort of simple
 * exception mechanism to report errors encountered.
 * Functions that can fail on error take a pointer to an ElvinError instance as 
 * their last parameter, and the error will be loaded with an error code and
 * message if the the function (or a sub function) fails. Functions which
 * would otherwise be void will often also return true/false as a convenience.
 * 
 * @see elvin_error_set()
 * @see elvin_error_ok()
 * @see on_error_return_false()
 * @see on_error_return()
 */
typedef struct
{
  int    code;
  char * message;
} ElvinError;

#define ELVIN_HOST_ERROR_BASE 10000
#define ELVIN_ERROR_BASE 20000

#define ELVIN_ERROR_NONE ELVIN_ERROR_BASE
#define ELVIN_ERROR_INTERNAL (ELVIN_ERROR_BASE + 1)
#define ELVIN_ERROR_PROTOCOL (ELVIN_ERROR_BASE + 2)
#define ELVIN_ERROR_CONNECTION_CLOSED (ELVIN_ERROR_BASE + 3)
#define ELVIN_ERROR_INVALID_URI (ELVIN_ERROR_BASE + 4)
#define ELVIN_ERROR_SYNTAX (ELVIN_ERROR_BASE + 5)
#define ELVIN_ERROR_TRIVIAL_EXPRESSION (ELVIN_ERROR_BASE + 6)

/**
 * Initialise an error. This should be done to initialise a new error 
 * instance. Use elvin_error_reset() to reset an existing instance.
 */
#define elvin_error_create() {ELVIN_ERROR_NONE, NULL}

/**
 * Free any resources allocated to an error instance and reset the error code.
 * The error instance may be reused after this call.
 * 
 * @see elvin_error_reset()
 */
void elvin_error_free (ElvinError *error);

/** 
 * Reset the error info back to OK state. Synonymn for elvin_error_free().
 */
#define elvin_error_reset(error) (elvin_error_free (error))

/**
 * Macro statement to return false if an error is set in the "error" variable
 * inside the current scope.
 * 
 * @param stat The statement to execute before the test.
 * 
 * See also on_error_return().
 */
#define on_error_return_false(stat) on_error_return (stat, false)

/**
 * Macro statement to return a given value if an error is set in the 
 * "error" variable inside the current scope.
 * 
 * @param stat The statement to execute before the test.
 * @param retval The value to return on error.
 * 
 * See also on_error_return().
 */
#define on_error_return(stat, retval) \
  {stat; if (elvin_error_occurred (error)) return (retval);}

/*
 * Convert the h_errno error code generated by gethostbyname () etc to
 * an error code. 
 */
#define HOST_TO_ELVIN_ERROR(code) (ELVIN_HOST_ERROR_BASE + code)
#define ERRNO_TO_ELVIN_ERROR(code) (code)

void elvin_perror (const char *tag, ElvinError *error);
bool elvin_error_from_errno (ElvinError *error);
bool elvin_error_set (ElvinError *error, int code, const char *message, ...);
bool elvin_error_assert (ElvinError *error, bool condition, 
                         int code, const char *message);

/** True if no error has occurred. */
#define elvin_error_ok(error) ((error)->code == ELVIN_ERROR_NONE)

/** True if an error has occurred. */
#define elvin_error_occurred(error) (!elvin_error_ok (error))

#endif /*ERRORS_H_*/

Releases
----------------------------------------------------------------------

Server 1.2

 * Support client auth in connection options
 * Federation TLS
 * Ship Avis server with default certs?
 * default federation class? e.g. Federation.Apply-Class[Public]=*
 * includes in config: would allow federation to be spec'd separately
 * Test large frames with new heap sizes
 * ?Federation.Classes.Require=internal
 * windows JRE does not have -server, need to add installer option
 * thread pool size option?
 * date in log messages
 * Liveness TestConn for client connections?

Client 1.1

 * TLS
 * allow connection options in URI? merge with given options?
 * add subscription string escape utilities
 * ep doesn't do ^D properly: needs to handle empty lines 
 * client should probably not log messages: events instead, esp
   DropWarn
 * ec/ep options for TLS

Not allocated
--------------

Client

* client source won't build in Eclipse without server. Need to add it
  ot deal with it otherwise. 
* synchronous reconnect/redirect? block for up to x secs before closing
* better reporting for going over connection limits (e.g. max subs)
* UDP unotify
* auto connect/reconnect
* lots of ec/ep options
* incorporate better RPM .spec and .rc files from OpenPKG http://cvs.openpkg.org/rlog?f=openpkg-src/avis/avis.spec http://cvs.openpkg.org/rlog?f=openpkg-src/avis/rc.avis
* discovery
* async/future-based messaging in client. use futures to track responses.
* BUG: ec hangs on Presence-Protocol from public.elvin.org. Takes a long time
  to close connection. possibly related to use of "tee" on command line

* MAYBE: replace IOException witn RuntimeIOException? relates/affected
  by async idea

Server

* ditch use of @ in federation? use of server domain is fairly useless
* failure to find VM wrapper on windows (David). possibly due to 
  uninstalling Java 5 after installing Java 6
* Mantara ec requires elvin:4.0//...
* Warning: Failed to cleanly shut down thread pool. avisd during
  testing for Alain. Also seen in FOCAL, possibly related to
  federation reconnection. Not due to connected clients. Perhaps due
  to waiting for Disconn to be sent?
* simple web-based stats: use small HTTP server.
* web-based management: use small HTTP server. or in context of OSGi
* OS X: installation in /usr/local means getting blown away on system
  reinstall. should we go in /opt?
* DEB, Solaris: look at je4 packages dir
* what happens when sending ntfn to client that's too big?
* test SecRqst: test_sync_modify_keys fails (should NACK empty keys)
* profile performance
* switch to launchd for OS X http://en.wikipedia.org/wiki/Launchd
  (10.4 only, but Java 5 only works there anyway). /Library/LaunchDaemons/ 
* partly done: router-wide options that allow client to grow connection
  footprint such like as keys, subscriptions. client can still easily kill
  server using long subs atm. keys attack window reduced but still may be
  possible using sub/ntfn keys plus long keys. need to check max size of key
  data.
* add message logging via MINA filter, remove current crusty approach
* notification dropping incl DropWarn
* write a multi-threaded test thrasher to test consistency
* look into whether server can store hashed keys only and avoid
  hashing them on each match. See Connection.matchSubscriptions ()

SSL
----------------------------------------------------------------------

Scenarios

 * Client connects to elvin:/secure/public.elvin.org, wants auth and
   privacy. Enable server auth on client, server has cert from root
   CA. Add optional server auth required option for client, plus
   optional trust keystore. Extend null trust manager as per
   example. Will need to add new Elvin constructor taking client
   options and absorb keys, etc into it. Server can have optional
   client auth

Todo

 * DONE: Avis client lib TLS
 * DONE: Create client/server certs, test mutual auth
 * DONE: Use separate keystore for trusted certs?
  
Questions

 * CLOSED: Do we need to support trusted clients? => need trust store
   on server, key store on client, enable client auth on server.

 * Do we want security per-URI?

 * CLOSED: Do we need to support trusted servers? => need trust store
   on client, enable server auth on client

 * Federation TLS: security per class?

 * CLOSED: Enable remote auth with URI option?
   elvin:/secure/host?Remote-Auth=true. probably not: options are
   connection options, not client config.

 * Do we want to support keystores other than JKS? eg. PKCS12. Check
   we could just import PKCS12, and add instructions if so.

 * CLOSED: Client -> trust: could implement trust manager: see
   "Creating Your Own X509TrustManager"

 * Password auth? Could use a KeyManager to use password auth? Not
   sure how X509KeyManager can be extended to do this. There may be an
   Elvin spec for this.


References

http://java.sun.com/j2se/1.5.0/docs/guide/security/jsse/JSSERefGuide.html#KeyClasses (includes programming example)
http://java.sun.com/j2se/1.5.0/docs/tooldocs/windows/keytool.html
http://java.sun.com/j2se/1.5.0/docs/api/java/security/KeyStore.html#getInstance(java.lang.String)
http://java.sun.com/j2se/1.5.0/docs/api/javax/net/ssl/SSLContext.html
http://java.sun.com/j2se/1.5.0/docs/guide/security/CryptoSpec.html#AppA
create SSL context: ~/Development/mina-1.1.5/example/src/main/java/org/apache/mina/example/echoserver/ssl/BogusSSLContextFactory.java

* SSLFilter -> SSLContext -> keys -> key manager factory -> key store
  (see createBougusServerSSLContext)

<?xml version="1.0"?>
<!--
  ====================================================================== 
  Avis Common Core
  ======================================================================
-->
<project name="avis.common" default="compile">
  
  <description>Avis common core</description>
  
  <property file="avis.properties" />
  
  <property name="common" value="${basedir}" />
  <property name="avis-root" value="${common}/../.." />
  <property name="web" value="${avis-root}/web" />
	
  <!-- Markdown 1.0.1: needed to build web page -->
  <property name="markdown" 
            value="${avis-root}/support/markdown-1.0.1/Markdown.pl" />
  
  <path id="classpath">
    <fileset dir="lib">
      <include name="*.jar" />
    </fileset>
    <pathelement path="classes/main" />
    <pathelement path="classes/test" />
  </path>
  
  <target name="compile" description="Compile source and tests">
    <ant antfile="${common}/build-common.xml" target="compile" inheritrefs="true" />
  </target>

  <target name="tests" depends="compile" description="Run unit tests">
    <ant antfile="${common}/build-common.xml" target="tests" inheritrefs="true" />
  </target>

  <target name="clean" description="Clean built artifacts">
    <ant antfile="${common}/build-common.xml" target="clean" />
  </target>

  <target name="clean-web" depends="clean"
  	      description="Clean generated website files">
    <delete>
      <fileset dir="${web}">
        <include name="index.html" />
        <include name="examples.html" />
        <include name="installation.html" />
        <include name="roadmap.html" />
        <include name="why_avis.html" />
      </fileset>
    </delete>
  </target>

  <target name="jar-common" depends="compile"
          description="Build avis-common.jar" unless="avis-common-uptodate">
    
    <mkdir dir="build" />
    
    <jar destfile="build/avis-common.jar">
      <fileset dir="classes/main" includes="**/*.class" />
    </jar>

  </target>

  <target name="jar-jarx">
    
    <!-- assume dfc.core at same level as Avis root -->
    <property name="dfc.home" value="${avis-root}/../dfc.core" />
    
    <ant dir="${dfc.home}" target="compile" inheritall="false" />
    
    <jar destfile="lib/jarx.jar">
      <fileset dir="${dfc.home}/classes">
        <include name="dsto/dfc/tools/**/*.class" />
      </fileset>
    </jar>
  </target>
  
  <!-- Use arcane Ant-isms to build web page from text using Markdown -->
  <target name="website"
          description="Build HTML files in web from sources">  
    <antcall target="fn:make-html">
      <param name="src" value="avis.txt" />
      <param name="dest" value="index.html" />
      <param name="web.title" value="Home" />
    </antcall>
  
    <antcall target="fn:make-html">
      <param name="src" value="examples.txt" />
      <param name="dest" value="examples.html" />
      <param name="web.title" value="Example" />
    </antcall>

    <antcall target="fn:make-html">
      <param name="src" value="roadmap.txt" />
      <param name="dest" value="roadmap.html" />
      <param name="web.title" value="Roadmap" />
    </antcall>

    <antcall target="fn:make-html">
      <param name="src" value="why_avis.txt" />
      <param name="dest" value="why_avis.html" />
      <param name="web.title" value="Why Choose Avis" />
    </antcall>

    <antcall target="fn:make-html">
      <param name="src" value="installation.txt" />
      <param name="dest" value="installation.html" />
      <param name="web.title" value="Installation" />
    </antcall>

    <antcall target="fn:make-html">
      <param name="src" value="federation.txt" />
      <param name="dest" value="federation.html" />
      <param name="web.title" value="Federation" />
    </antcall>

    <antcall target="fn:make-html">
      <param name="src" value="client_library.txt" />
      <param name="dest" value="client_library.html" />
      <param name="web.title" value="Client Library" />
    </antcall>

    <antcall target="fn:make-html">
      <param name="src" value="downloads.txt" />
      <param name="dest" value="downloads.html" />
      <param name="web.title" value="Downloads" />
    </antcall>

    <antcall target="fn:make-html">
      <param name="src" value="subscription_language.txt" />
      <param name="dest" value="subscription_language.html" />
      <param name="web.title" value="Elvin Subscription Language" />
    </antcall>

    <antcall target="fn:make-html">
      <param name="src" value="documentation.txt" />
      <param name="dest" value="documentation.html" />
      <param name="web.title" value="Documentation" />
    </antcall>

  </target>
  
  <target name="deploy-website" depends="website"
          description="Rsync web site to sourceforge">
    <exec executable="rsync" dir="${web}">
      <arg value="-rlgoDv" />
      <arg value="--delete" />
      <arg line="--include *.html" />
      <arg line="--include *.png" />
      <arg line="--include *.gif" />
      <arg line="--include *.css" />
      <arg line="--exclude *" />
      <arg line="--exclude */.svn" />
      <arg line="--exclude *.htmli" />
      <arg line="--exclude *.txt" />
      <arg line="--exclude .*" />
      <arg value="." />
      <arg value="sourceforge:/home/groups/a/av/avis/htdocs/" />
    </exec>
  </target>

  <target name="changelog"
          description="Generate a change log (needs previous rev #)">
    <!-- Use command below to get previous release rev #
         svn log -stop-on-copy https://avis.svn.sourceforge.net/svnroot/avis/tags/release_0.7 -->
    <input addproperty="release_rev" message="Enter rev # of last release" />
    <property name="component" value="common" />
    
    <ant antfile="${common}/build-common.xml" target="changelog" 
         inheritrefs="true" />
  </target>

  <target name="backup-sourceforge"
          description="Backup SVN repository from Sourceforge">
    <exec executable="rsync">
      <arg line="-av avis.svn.sourceforge.net::svn/avis/* ../../../avis_backup/svn/" />
    </exec>
  </target>

  <!-- Build a web page from text template using Markdown -->
  <target name="fn:make-html">
    <concat destfile="${web}/${dest}" append="false">
      <filelist dir="${web}" files="header.htmli" />
    	
      <filterchain>
        <expandproperties />
      </filterchain>
    </concat>
    
    <exec executable="perl">
      <arg value="${markdown}" />
      <arg value="${web}/${src}" />
      
      <redirector append="true">
        <outputmapper type="merge" to="${web}/${dest}" />
      </redirector>
    </exec>
    
    <concat destfile="${web}/${dest}" append="true">
      <filelist dir="${web}" files="footer.htmli" />
    </concat>
  </target>

</project>

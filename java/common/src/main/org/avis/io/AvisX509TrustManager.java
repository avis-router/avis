package org.avis.io;import java.security.KeyStore;import java.security.KeyStoreException;import java.security.NoSuchAlgorithmException;import java.security.NoSuchProviderException;import java.security.cert.CertificateException;import java.security.cert.X509Certificate;import javax.net.ssl.TrustManager;import javax.net.ssl.TrustManagerFactory;import javax.net.ssl.X509TrustManager;/** * An X.509 trust manager that allows optional client/server trust * requirements. When trust is required, it falls back on the * platform's default trust manager. *  * See also * http://java.sun.com/j2se/1.5.0/docs/guide/security/jsse/JSSERefGuide.html * #X509TrustManager *  * @author Matthew Phillips */public class AvisX509TrustManager implements X509TrustManager{  /*   * The default X509TrustManager returned by SunX509. We'll delegate   * decisions to it, and fall back to the logic in this class if the   * default X509TrustManager doesn't trust it.   */  private X509TrustManager sunX509TrustManager;  private boolean requireTrustedServer;  private boolean requireTrustedClient;  public AvisX509TrustManager (KeyStore keystore,                                boolean requireTrustedServer,                               boolean requireTrustedClient)     throws NoSuchAlgorithmException, NoSuchProviderException, KeyStoreException  {    this.requireTrustedServer = requireTrustedServer;    this.requireTrustedClient = requireTrustedClient;    this.sunX509TrustManager = initTrustManager (keystore);  }  private X509TrustManager initTrustManager (KeyStore keystore)    throws NoSuchAlgorithmException, NoSuchProviderException, KeyStoreException  {    TrustManagerFactory sunManagerFactories =       TrustManagerFactory.getInstance ("SunX509", "SunJSSE");        sunManagerFactories.init (keystore);    /*     * Iterate over the returned trustmanagers, look for an instance     * of X509TrustManager. If found, use that as our "default" trust     * manager.     */    for (TrustManager trustManager : sunManagerFactories.getTrustManagers ())    {      if (trustManager instanceof X509TrustManager)        return (X509TrustManager)trustManager;    }        throw new NoSuchProviderException ("No default X509 trust manager");  }  /*   * Delegate to the default trust manager.   */  public void checkClientTrusted (X509Certificate [] chain,                                  String authType)    throws CertificateException  {    if (requireTrustedClient)      sunX509TrustManager.checkClientTrusted (chain, authType);  }  /*   * Delegate to the default trust manager.   */  public void checkServerTrusted (X509Certificate [] chain,                                  String authType)    throws CertificateException  {    if (requireTrustedServer)      sunX509TrustManager.checkServerTrusted (chain, authType);  }  /*   * Merely pass this through.   */  public X509Certificate [] getAcceptedIssuers ()  {    return sunX509TrustManager.getAcceptedIssuers ();  }}
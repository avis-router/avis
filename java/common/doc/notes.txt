Bugs
----------------------------------------------------------------------

* client source won't build in Eclipse without server. Need to add it
  ot deal with it otherwise.
 
* Mantara ec requires elvin:4.0//...

* Avis: Warning: Failed to cleanly shut down thread pool. avisd during
  testing for Alain. Not due to connected clients. Perhaps due to
  waiting for Disconn to be sent?

* ep doesn't do ^D properly: needs to handle empty lines
  
* client should probably not log messages: events instead, esp
  DropWarn

* DONE: Java 1.6 doesn't have DECOMPOSE. Will break if used on 1.6,
  won't compile on 1.6.

* BUG: ec hangs on Presence-Protocol from public.elvin.org. Takes a long time
  to close connection. possibly related to use of "tee" on command line

Releases
----------------------------------------------------------------------

Server 1.1.3

 * date in log messages

 * DONE: Unicode decompose on 1.6

 * DONE: require(e) vs. require (e). Mantara accepts both, we don't do first
   one any more.
 
 * Update MINA: some tests fail 1.1.2

 * java.io.IOException: Connection reset by peer: do not log IO errors
   as alarms?

Server 1.2

* ?Federation.Classes.Require=internal
* SSL
* look into whether server can store hashed keys only and avoid
  hashing them on each match. See Connection.matchSubscriptions ()
* OS X: installation in /usr/local means getting blown away on system
  reinstall. should we go in /opt?
* DEB, Solaris: look at je4 packages dir
* windows JRE does not have -server, need to add installer option
* thread pool size option?

Not allocated
--------------

Client

* allow connection options in URI
* add example code to web site: syntax highlighting
* web-based management: may need to be in context of OSGi
* add subscription string escape utilities
* synchronous reconnect/redirect? block for up to x secs before closing
* better reporting for going over connection limits (e.g. max subs)
* UDP unotify
* auto connect/reconnect
* lots of ec/ep options
* incorporate better RPM .spec and .rc files from OpenPKG http://cvs.openpkg.org/rlog?f=openpkg-src/avis/avis.spec http://cvs.openpkg.org/rlog?f=openpkg-src/avis/rc.avis
* MAYBE: replace IOException witn RuntimeIOException? relates/affected
  by async idea
* discovery
* async/future-based messaging in client. use futures to track responses.
* DONE: think about putting expected reply type in XID messages: would
  remove need for param in sendAndReceive ().
* DONE: Key I/O
* DONE: re org into client, server and common projects?
* DONE: fix bogus generics in AST nodes: do not compile with javac
* DONE: we allow unsubscribe from notification: should resolve sub
  ID's to objects before firing event.
* WONT DO: could use fast collection for client subscription map
* DONE: keepalives? connection test

Server

* what happens when sending ntfn to client that's too big?
* test SecRqst: test_sync_modify_keys fails (should NACK empty keys)
* profile performance
* switch to launchd for OS X http://en.wikipedia.org/wiki/Launchd
  (10.4 only, but Java 5 only works there anyway). /Library/LaunchDaemons/ 
* partly done: router-wide options that allow client to grow connection
  footprint such like as keys, subscriptions. client can still easily kill
  server using long subs atm. keys attack window reduced but still may be
  possible using sub/ntfn keys plus long keys. need to check max size of key
  data.
* add message logging via MINA filter, remove current crusty approach
* notification dropping incl DropWarn
* write a multi-threaded test thrasher to test consistency
* write a multi-threaded test thrasher to try to crash server
* write multithreaded "fuzz" test: fire random messages
* how do we handle other langs in SVN? do we need to? e.g. should
  Python binding be a separate project?
* DONE: sub expr error reporting as in sec 6.3 and 7.4.2 (NACK codes)

* DONE: constant pool for Const?
* DONE: connection options
* DONE: check client version numbers
* DONE: ec/ep
* DONE: Klaus: add interface selection
* DONE: Ian's suggestions + diagrams
* DONE: web site PR: why use Avis? examples see why.txt
* DONE: pkg permissions
* DONE: case-independent options
* DONE: full test with Sticker
* DONE: need separate VM's for MaliciousClient test
* DONE: roadmap. ewafd-equivalent. built in?
* DONE: no. do we need SSL/TLS in 1.0?
* DONE: add Unix and windows service wrappers and installers
* DONE: add basic settings to become net ready: limit connection counts,
  subs, bandwidth etc to avoid DOS attacks possible to OOM the server by
  flooding it with fairly large packets.
* DONE: basic enforcment of connection options
* DONE: test performance after MINA 1.0 port. seems to be slower on
  test_threaded_clients (old 6s, new 12s)
* DONE: consistency: use multi-reader setup for changes to ensure
  e.g. a notification not delivered for an old sub already ack'ed.
* DONE: port to MINA 1.0.0. total API change, no porting guide?!
  IoSession seems to replace ProtocolSession. see
  http://svn.apache.org/viewvc/directory/trunks/mina/example/src/main/java/org/apache/mina/example/sumup/

SSL
----------------------------------------------------------------------

* SSLFilter -> SSLContext -> keys -> key manager factory -> key store
  (see createBougusServerSSLContext)

http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/keytool.html

http://java.sun.com/j2se/1.5.0/docs/api/java/security/KeyStore.html#getInstance(java.lang.String)
http://java.sun.com/j2se/1.5.0/docs/api/javax/net/ssl/SSLContext.html
http://java.sun.com/j2se/1.5.0/docs/guide/security/CryptoSpec.html#AppA
create SSL context: ~/Development/mina-1.1.2/example/src/main/java/org/apache/mina/example/echoserver/ssl/BogusSSLContextFactory.java

Federation
----------------------------------------------------------------------

* DONE: test @.elvin.org
* DONE: Enforce connection options frame size on federated notifications
* DONE: Stricter sanity checking for domain 
* DONE: check TODO's
* DONE: Clean up log messages

--

* DONE: Liveness checking with TestConn. Federation.Keepalive-Interval=60
* DONE: Apply-Class can only affect one router
* DONE: Default federation class? not
* DONE: Add-Attribute
* DONE: Do we want to use better config file parser? Need to resolve use if ":"
* DONE: Will probably encounter FedSubDiff from 4.4: may need to rev-engineer

################################################################
# federation
#
# Default: no
# 
# Controls whether the router's support for wide area federation is to
# be activated.  If not, none of the other federation configuration
# options will have any effect.
#
# federation no

################################################################
# federation.name
#
# Default: <automatic>
# 
# The name the router will use for wide area federation. This name
# MUST be globally unique (we strongly recommend your host name from
# DNS), but the same across all members of a failover set.  If no name
# is provided, elvind will attempt to determine a unique name for
# itself.
#
# federation.name miles.mantara.com

################################################################
# federation.protocol
#
# Default: <none>
# 
# The protocols the server will listen for wide area federation
# connections with.
#
# federation.protocol ewaf:/tcp,none,xdr/0.0.0.0:2916
# federation.protocol ewaf:/ssl,none,xdr/0.0.0.0:12304

################################################################
# federation.class
#
# Default: <none>
#
# Each class entry defines the name of a class of federation links.
# The policies below are applied to links on the basis of their class.
# 
# federation.class public
# federation.class internal
# federation.class partner

################################################################
# federation.class.require
#
# Default: <none>
#
# The router may require federation links to be active in specific
# link classes before allowing clients to connect.  If at any time
# there is not at least one connected link in each such required link
# class then any existing clients will be disconnected and no new
# clients accepted until all required link classes have at least one
# connected link.
# 
# federation.class.require internal

################################################################
# federation.identify.address
# federation.identify.domain
# federation.identify.id
#
# Default: <none>
#
# Restrict the machines that may connect to us with this class of
# federation link.  This serves to identify incoming federation links
# and assign them to classes.
# 
# federation.identify.address	public		public.elvin.org
# federation.identify.address	internal	10.20.30.0/24
# federation.identify.domain	partner		.example.com

################################################################
# federation.subscribe
#
# Default: <none>
#
# Specifies the notifications we are willing to receive from the other
# servers in the federation.  The notifications are specified by a
# standard Elvin subscription expression or the keywords `TRUE' (to
# accept any notifications) or `FALSE' (to accept none).
# 
# federation.subscribe public require(X-NNTP-Host)
# federation.subscribe internal TRUE
# federation.subscribe partner TICKERTAPE == "partner chat"

################################################################
# federation.provide
#
# Default: <none>
#
# Specifies the notifications we are willing to provide to the other
# servers in the federation.  The notifications are specified by a
# standard Elvin subscription expression or the keywords `TRUE' (to
# provide all notifications) or `FALSE' (to provide none).
# 
# federation.provide public FALSE
# federation.provide internal require(TICKERTAPE) || require(NEWSGROUPS)
# federation.provide partner TICKERTAPE == "partner chat"

################################################################
# federation.link
#
# Default: <none>
#
# Each federation link defines a connection to be initiated to another
# router.
# 
# federation.link public ewaf:/tcp,none,xdr/public.elvin.org:2916
# federation.link partner ewaf:/ssl,none,xdr/elvin.example.org:12304

################################################################
# federation.keepalive.period
#
# Default: 2 minutes
#
# The frequency with which to test each federation connection.
# 
# federation.keepalive.period 2m

################################################################
# federation.keepalive.timeout
#
# Default: 20 seconds
#
# The maximum length of time to wait for a response to a test before
# declaring the link dead.
# 
# federation.keepalive.timeout 20s

################################################################
# federation.propagation.interval
#
# Default: off
#
# The minimum length of time between receiving acknowledgement of one
# subscription update and sending the next. If set to zero, subsequent
# subscription updates will be propagated immediately, even before the
# previous update has been acknowledged. If updates have to be delayed
# then after the propagation interval has expired the entire
# subscription database will be re-sent, not just the changes.
# 
# federation.propagation.interval 500ms

Notes
----
* JUTestServerAttack: Client can exhaust default server heap with
  2K max-sub-count x 3K max-sub-length
* Using fastutil increased server JAR from 334K to 446K.

Issues for David

* DONE: What is new router.coalesce-delay?
* DONE: Can I put je4 in distro? don't need it
* DONE:elvind does not do byte_size_max
* DONE:what is QosRqst? mentioned in 7.5 for changing options

Changelog
----------------------------------------------------------------------

to find revision of tag:

svn log --stop-on-copy https://svn.sourceforge.net/svnroot/avis/tags/release_0.4

to create change log since tag

svn2cl -r XXXX:HEAD https://svn.sourceforge.net/svnroot/avis/trunk


Client/server component split

common
  src
    main
      org.avis.common
      org.avis.io
      org.avis.security
      org.avis.util
    test
      org.avis.security
    misc
      gpl_java_header.txt
  lib
    mina ...
  build
    avis-common.jar
client
  avis-client.properties
  src
    main
      org.avis.client
      org.avis.tools
    test
      org.avis.client
  bin
    ec
    ep
  build
    avis-client.jar (contains common classes)
    avis-tools.jar
  classes
    main
    test

server
  avis-server.properties
  src
    org.avis.server
    org.avis.subscription
  bin
    avisd
  packaging
  build
    avis-router.jar

Release client by copying common + client to branches/client/release_0.1
Release server by copying common + server to branches/server/release_1.1

Server -> avis-server distro
Client -> avis-client distro (src, javadoc, jar, examples)
       -> avis-tools distro (ec, ep)
